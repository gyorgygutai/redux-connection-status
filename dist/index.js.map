{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 544f86afae90620255ca","webpack:///./src/index.js","webpack:///./src/reducer.js","webpack:///./src/syncer.js"],"names":["syncConnectionWithStore","connectionStatusChanged","STATUS_CHANGED","connectionReducer","isOnline","type","payload","initialState","state","action","connectionSyncer","store","dispatch","navigator","onLine","window","addEventListener","syncerFunction"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WCnCSA,uB;WAAyBC,uB;WAAyBC,c;;;;;;;;;;;;;;;;;;;;;;;;;;WCD3CD,uB,GAAAA,uB;qBAQQE,iB;;;;;;;;;;;;;;;;AAVjB,OAAMD,0CAAiB,2BAAvB;;AAEA,YAASD,uBAAT,CAAkCG,QAAlC,EAA4C;AACjD,YAAO,EAAEC,MAAMH,cAAR,EAAwBI,SAASF,QAAjC,EAAP;AACD;;AAED,OAAMG,eAAe;AACnBH,eAAU;AADS,IAArB;;AAIe,YAASD,iBAAT,GAA0D;AAAA,SAA9BK,KAA8B,uEAAtBD,YAAsB;AAAA,SAARE,MAAQ;;AACvE,SAAIA,OAAOJ,IAAP,KAAgBH,cAApB,EAAoC;AAClC,2BAAWM,KAAX,IAAkBJ,UAAUK,OAAOH,OAAnC;AACD;;AAED,YAAOE,KAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdD,YAASE,gBAAT,CAA2BC,KAA3B,EAAkC;AAChCA,WAAMC,QAAN,CAAe,sCAAwBC,UAAUC,MAAlC,CAAf;;AAEAC,YAAOC,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,cAAML,MAAMC,QAAN,CAAe,sCAAwB,IAAxB,CAAf,CAAN;AAAA,MAAlC;AACAG,YAAOC,gBAAP,CAAwB,SAAxB,EAAmC;AAAA,cAAML,MAAMC,QAAN,CAAe,sCAAwB,KAAxB,CAAf,CAAN;AAAA,MAAnC;AACD;;AAED,OAAMZ,0BAA0B,SAA1BA,uBAA0B,CAACW,KAAD;AAAA,SAAQM,cAAR,uEAAyBP,gBAAzB;AAAA,YAA8CO,eAAeN,KAAf,CAA9C;AAAA,IAAhC;;qBAEeX,uB","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"index\"] = factory();\n\telse\n\t\troot[\"index\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 544f86afae90620255ca\n **/","import connectionReducer, { connectionStatusChanged, STATUS_CHANGED } from './reducer'\nimport syncConnectionWithStore from './syncer'\n\nexport { syncConnectionWithStore, connectionStatusChanged, STATUS_CHANGED }\n\nexport default connectionReducer\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","export const STATUS_CHANGED = 'Connection.STATUS_CHANGED'\n\nexport function connectionStatusChanged (isOnline) {\n  return { type: STATUS_CHANGED, payload: isOnline }\n}\n\nconst initialState = {\n  isOnline: false\n}\n\nexport default function connectionReducer (state = initialState, action) {\n  if (action.type === STATUS_CHANGED) {\n    return {...state, isOnline: action.payload}\n  }\n\n  return state\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/reducer.js\n **/","import { connectionStatusChanged } from './reducer'\n\nfunction connectionSyncer (store) {\n  store.dispatch(connectionStatusChanged(navigator.onLine))\n\n  window.addEventListener('online', () => store.dispatch(connectionStatusChanged(true)))\n  window.addEventListener('offline', () => store.dispatch(connectionStatusChanged(false)))\n}\n\nconst syncConnectionWithStore = (store, syncerFunction = connectionSyncer) => syncerFunction(store)\n\nexport default syncConnectionWithStore\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/syncer.js\n **/"],"sourceRoot":""}